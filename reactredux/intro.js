/* Before react, we had jquery, which was very imperative. created a lot of inconsistencies. constantly keeping track of what changed and what we have to chang e-> slow, complex, difficult to scale. 

Ract was created by facebook to solvce thi sissue -> create websites in a nice predictable way, have different people working on it at the sametime. 

very reliable and consistent, it manages to make our websites, the DOM, change in rpedictable ways that is easy to scale and manage. react can be used in mobile apps, browser, desktop apps. many big companies use react. useful tool, in high demand. 

to understand react, must go over a few principles that are valuable. 
1. thinking in componenets -> think of web a sa network of small components, everyone builds a lego blocks, and we just combine these lego blocks to make website. cxombine small components into bigger cmponents -> small components to reuse and put on different parts of the webpage. e.g. background ,nav bar, sign in forms. 

becase of how react is structured, it doesn't need to know about the rest of the webpage. it's just its own lego block thatt works by itself. reduce dependencies on other parts of the website -> plug in wherever you want. 

2. one way data flow -> data flows from top to bottom and never the other way round. if parents change, only children knows about the change. diretion of data flow is always downstream. this is a very important concept that react brought in > bug free code. 

3. virtual DOM -> should minimize # of dom manips that we do reduces performacne fo webpage and reduce bugs. before react, we were the painters i.e. told DOM what to do, remove this elementput this in, color this way, now, we have React bot which creates a virtual bot that is a JS object, which just describes the current state of the website. give this object to react, and the reactbot will automatically make changes to the DOM and paint it in the most optimal way possible. now we don't have to do grabelementsbyID and queryselectors. virtual DOM is a copy of the DOM in a JS object. react, underneath the hood, changes the view. tts why it's able tow ork outside of browsers and we can use on mobile devices. react is the machine and what the canvas is on, can change canvas to whatever we want.

4. great ecosystem -> one of the biggest ecosystmes in JS right now. lots of tools tt work with react. developoer community is big, find solutions online, react packages in npm, use in node, webpack and babel to use with it, really godo ecosystem tt uses latest JS tech to build websites in a nice and elemgant way. 

5. when you first look at react, it looks foreign but actually it's easy. classes, constructors, and each class has mandatory render function tell you what this clock should render e.g. return a <h1> and <h2>, props. states, react components -> just syntax that we use. 

--

you could install react as a package in package.json. 
but because react apps  are so common, there is a tool tt allows us to right away create a react app with all our files put into place. terminal "sudo npm install -g create-react-app" global package tt you install from NPM, and it creates a starter proj tt contains webpack, babel, lint & debugging, creates all these infra for u so u can right away start writing the app. good tool tt alot of ppl use. 

then, create-react-app robofriends -> create the robofriends folder in your directory

once you ls inside this thing, it already installs react and all the dependencies that you need

json -> start, build, test, eject. 

start -> starts our server. "npm start" => automatically starts a live server

react-scripts -> what makes createreactapp so awesome. instead of installing webpack and babel, and the work to get ES6 JS working and browserify to bundle, react-scripts does everything for you and does the latest and g reatest so we don't need to worry. eject -> if you wanna customize react scripts and go on your own, customize your app. createreactapp best way to start an app. 

package-lock.json -> automatically generated by package.json tt makes sure the version #s of dependencies are locked in. -> give this proejct to someone else, makes sures the verion are correct to work 100% of the time. .gitignore  -> if it sees anything ehre tt should not include, it auto ignores these files. e.g. node-modules don't wanna push to repo. coverage (abt testing), build folders. auto generates gitignore we dun have to touch it.

.ico -> icons

src folder -> where all the magic happnes. 

index.js -> main script file -> do a few inmports, import a few differet scripts. also new syntax: ReactDOM.render(app...)

public -> index.html -> within body there is only one div and its 

render App -> this is a react component, i want to render on the screen in the body, this thign. 

to update, just change the react version in the json file then run npm install in terminal in the directory.  check if it's working run npm start

update libraries -> can break your app. you want to be craeful & think in your carerr. this is why package.json is good so that you can see what version sto run. updating stuff is good but not good all the time -> codependent bugs etc

npx -> package runner tool that comes with npm+

now, run: npx create-react-app robofriends

then make sure you are in robofriends directory and run npm start

newest version of create-react-app:
src index.js -> serviceworker is automatically unregister. serviceworker -> progressive webapps. we technically dontt use serviceworker until we need to (but we dunnid to worry abt this)

app.js -> logo is svg now. and App() is a function instead f a class. don't wrory abt the difference. will be covered later on in class vs functional compoennets. for now, change your function to a class so you can follow the video. 

*/